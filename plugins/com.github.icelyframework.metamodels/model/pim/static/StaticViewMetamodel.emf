@namespace(uri="http://github.com/icelyframework/static", prefix="icely")
package staticview;

abstract class Resource {
	id attr String[1] name;
	ref Resource[*]#isRelatedResource hasRelatedResource;
	ref Resource#hasRelatedResource isRelatedResource;
	ref Aggregate[1]#hasResource aggregate;
	attr String[1] simpleName;
	attr String pathName;
}

class Property {
	attr boolean[1] isUnique;
	attr boolean[1] isNamingProperty;
	attr String[1] name;
	attr boolean[1] isRequired = true;
	attr int min;
	attr int max;
	ref TypeDefinition[1] type;
}

@Ecore
class Project {
	id attr String[1] name;
	attr String[1] basePath;
	val Application[+]#project hasApplication;
	val PrimitiveType[*] primitiveTypes;
}

class Relation {
	!unique attr Multiplicity[1] multiplicity;
	ref DomainObject[1] target;
	ref DomainObject[1]#hasRelation source;
	!unique attr String cascade;
	!unique attr String orderBy;
	!unique attr String visibility;
	!unique attr boolean required;
	!unique attr boolean nullable;
	attr String[1] name;
	ref Relation opposite;
	ref TypeDefinition[1] type;
}

enum Multiplicity {
	ONE_TO_MANY = 0;
	MANY_TO_ONE = 1;
	ONE_TO_ONE = 2;
	MANY_TO_MANY = 3;
}

class Application {
	val Aggregate[+]#application hasAggregate;
	attr String name;
	ref Project[1]#hasApplication project;
	val ComplexType[*] complextypes;
}

abstract class TypeDefinition {
}

class Enumeration extends DomainObject {
	val Literal[+] hasLiteral;
}

class BasicType extends ValueObject {
}

class Literal {
	id attr String[1] name;
	attr int[1] value;
}

enum DefaultType {
	String = 0;
	Integer = 1;
	Float = 2;
	Boolean = 3;
	null = 4;
	Date = 5;
}

class Entity extends DomainObject {
}

class DTO extends ValueObject {
}

abstract class DomainObject extends SimpleType {
	val Property[*] hasProperty;
	attr String name;
	attr boolean ~abstract;
	!unique attr boolean aggregateRoot = false;
	val Relation[*]#source hasRelation;
	ref Aggregate[1]#hasDomainobject aggregate;
	ref DomainObject ~extends;
	attr boolean scaffold;
}

class ValueObject extends DomainObject {
	attr boolean immutable;
	attr boolean persistent;
}

class Aggregate {
	val DomainObject[+]#aggregate hasDomainobject;
	attr String name;
	ref Application[1]#hasAggregate application;
	val Resource[*]#aggregate hasResource;
	ref DomainObject[1] aggregateRoot;
}

class SingletonResource extends Resource {
	attr String lookupField;
}

abstract class Event extends ValueObject {
}

class CommandEvent extends Event {
}

class DomainEvent extends Event {
}

class PrimitiveType extends SimpleType {
	attr DefaultType type;
}

class CollectionResource extends Resource {
}

abstract class SimpleType extends TypeDefinition {
	id attr String[1] typeName;
}

class ComplexType extends TypeDefinition {
	ref TypeDefinition[1] type;
}

