/**
 */
package com.github.icelyframework.service.impl;

import com.github.icelyframework.service.Aggregate;
import com.github.icelyframework.service.DomainObject;
import com.github.icelyframework.service.DomainObjectOperation;
import com.github.icelyframework.service.Inheritance;
import com.github.icelyframework.service.Property;
import com.github.icelyframework.service.Relation;
import com.github.icelyframework.service.Repository;
import com.github.icelyframework.service.ServicePackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domain Object</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isAbstract <em>Abstract</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isAggregateRoot <em>Aggregate Root</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getRelations <em>Relations</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getInheritance <em>Inheritance</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getRepository <em>Repository</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getOperations <em>Operations</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getAggregate <em>Aggregate</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getPackage <em>Package</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isGapClass <em>Gap Class</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isCache <em>Cache</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isOptimisticLocking <em>Optimistic Locking</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getDatabaseTable <em>Database Table</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getValidate <em>Validate</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#getDiscriminatorColumnValue <em>Discriminator Column Value</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isScaffold <em>Scaffold</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isGeneratedByJHipster <em>Generated By JHipster</em>}</li>
 *   <li>{@link com.github.icelyframework.service.impl.DomainObjectImpl#isGeneratedBySculptor <em>Generated By Sculptor</em>}</li>
 * </ul>
 *
 * @generated
 */
public abstract class DomainObjectImpl extends SimpleTypeImpl implements DomainObject {
	/**
	 * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getProperties()
	 * @generated
	 * @ordered
	 */
	protected EList<Property> properties;

	/**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected static final String NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
	protected String name = NAME_EDEFAULT;

	/**
	 * The default value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isAbstract()
	 * @generated
	 * @ordered
	 */
	protected static final boolean ABSTRACT_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isAbstract() <em>Abstract</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isAbstract()
	 * @generated
	 * @ordered
	 */
	protected boolean abstract_ = ABSTRACT_EDEFAULT;

	/**
	 * The default value of the '{@link #isAggregateRoot() <em>Aggregate Root</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isAggregateRoot()
	 * @generated
	 * @ordered
	 */
	protected static final boolean AGGREGATE_ROOT_EDEFAULT = true;

	/**
	 * The cached value of the '{@link #isAggregateRoot() <em>Aggregate Root</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isAggregateRoot()
	 * @generated
	 * @ordered
	 */
	protected boolean aggregateRoot = AGGREGATE_ROOT_EDEFAULT;

	/**
	 * The cached value of the '{@link #getRelations() <em>Relations</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRelations()
	 * @generated
	 * @ordered
	 */
	protected EList<Relation> relations;

	/**
	 * The cached value of the '{@link #getInheritance() <em>Inheritance</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getInheritance()
	 * @generated
	 * @ordered
	 */
	protected Inheritance inheritance;

	/**
	 * The cached value of the '{@link #getRepository() <em>Repository</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getRepository()
	 * @generated
	 * @ordered
	 */
	protected Repository repository;

	/**
	 * The cached value of the '{@link #getOperations() <em>Operations</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOperations()
	 * @generated
	 * @ordered
	 */
	protected EList<DomainObjectOperation> operations;

	/**
	 * The default value of the '{@link #getPackage() <em>Package</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPackage()
	 * @generated
	 * @ordered
	 */
	protected static final String PACKAGE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getPackage() <em>Package</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getPackage()
	 * @generated
	 * @ordered
	 */
	protected String package_ = PACKAGE_EDEFAULT;

	/**
	 * The default value of the '{@link #isGapClass() <em>Gap Class</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isGapClass()
	 * @generated
	 * @ordered
	 */
	protected static final boolean GAP_CLASS_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isGapClass() <em>Gap Class</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isGapClass()
	 * @generated
	 * @ordered
	 */
	protected boolean gapClass = GAP_CLASS_EDEFAULT;

	/**
	 * The default value of the '{@link #isCache() <em>Cache</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isCache()
	 * @generated
	 * @ordered
	 */
	protected static final boolean CACHE_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isCache() <em>Cache</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isCache()
	 * @generated
	 * @ordered
	 */
	protected boolean cache = CACHE_EDEFAULT;

	/**
	 * The default value of the '{@link #isOptimisticLocking() <em>Optimistic Locking</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isOptimisticLocking()
	 * @generated
	 * @ordered
	 */
	protected static final boolean OPTIMISTIC_LOCKING_EDEFAULT = true;

	/**
	 * The cached value of the '{@link #isOptimisticLocking() <em>Optimistic Locking</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isOptimisticLocking()
	 * @generated
	 * @ordered
	 */
	protected boolean optimisticLocking = OPTIMISTIC_LOCKING_EDEFAULT;

	/**
	 * The default value of the '{@link #getDatabaseTable() <em>Database Table</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDatabaseTable()
	 * @generated
	 * @ordered
	 */
	protected static final String DATABASE_TABLE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getDatabaseTable() <em>Database Table</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDatabaseTable()
	 * @generated
	 * @ordered
	 */
	protected String databaseTable = DATABASE_TABLE_EDEFAULT;

	/**
	 * The default value of the '{@link #getValidate() <em>Validate</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getValidate()
	 * @generated
	 * @ordered
	 */
	protected static final String VALIDATE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getValidate() <em>Validate</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getValidate()
	 * @generated
	 * @ordered
	 */
	protected String validate = VALIDATE_EDEFAULT;

	/**
	 * The default value of the '{@link #getDiscriminatorColumnValue() <em>Discriminator Column Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDiscriminatorColumnValue()
	 * @generated
	 * @ordered
	 */
	protected static final String DISCRIMINATOR_COLUMN_VALUE_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getDiscriminatorColumnValue() <em>Discriminator Column Value</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getDiscriminatorColumnValue()
	 * @generated
	 * @ordered
	 */
	protected String discriminatorColumnValue = DISCRIMINATOR_COLUMN_VALUE_EDEFAULT;

	/**
	 * The default value of the '{@link #isScaffold() <em>Scaffold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isScaffold()
	 * @generated
	 * @ordered
	 */
	protected static final boolean SCAFFOLD_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isScaffold() <em>Scaffold</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isScaffold()
	 * @generated
	 * @ordered
	 */
	protected boolean scaffold = SCAFFOLD_EDEFAULT;

	/**
	 * The default value of the '{@link #isGeneratedByJHipster() <em>Generated By JHipster</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isGeneratedByJHipster()
	 * @generated
	 * @ordered
	 */
	protected static final boolean GENERATED_BY_JHIPSTER_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isGeneratedByJHipster() <em>Generated By JHipster</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isGeneratedByJHipster()
	 * @generated
	 * @ordered
	 */
	protected boolean generatedByJHipster = GENERATED_BY_JHIPSTER_EDEFAULT;

	/**
	 * The default value of the '{@link #isGeneratedBySculptor() <em>Generated By Sculptor</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isGeneratedBySculptor()
	 * @generated
	 * @ordered
	 */
	protected static final boolean GENERATED_BY_SCULPTOR_EDEFAULT = true;

	/**
	 * The cached value of the '{@link #isGeneratedBySculptor() <em>Generated By Sculptor</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isGeneratedBySculptor()
	 * @generated
	 * @ordered
	 */
	protected boolean generatedBySculptor = GENERATED_BY_SCULPTOR_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainObjectImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ServicePackage.Literals.DOMAIN_OBJECT;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Property> getProperties() {
		if (properties == null) {
			properties = new EObjectContainmentEList<Property>(Property.class, this, ServicePackage.DOMAIN_OBJECT__PROPERTIES);
		}
		return properties;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getName() {
		return name;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setName(String newName) {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__NAME, oldName, name));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isAbstract() {
		return abstract_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAbstract(boolean newAbstract) {
		boolean oldAbstract = abstract_;
		abstract_ = newAbstract;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__ABSTRACT, oldAbstract, abstract_));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isAggregateRoot() {
		return aggregateRoot;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAggregateRoot(boolean newAggregateRoot) {
		boolean oldAggregateRoot = aggregateRoot;
		aggregateRoot = newAggregateRoot;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__AGGREGATE_ROOT, oldAggregateRoot, aggregateRoot));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<Relation> getRelations() {
		if (relations == null) {
			relations = new EObjectContainmentWithInverseEList<Relation>(Relation.class, this, ServicePackage.DOMAIN_OBJECT__RELATIONS, ServicePackage.RELATION__SOURCE);
		}
		return relations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Inheritance getInheritance() {
		return inheritance;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetInheritance(Inheritance newInheritance, NotificationChain msgs) {
		Inheritance oldInheritance = inheritance;
		inheritance = newInheritance;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__INHERITANCE, oldInheritance, newInheritance);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setInheritance(Inheritance newInheritance) {
		if (newInheritance != inheritance) {
			NotificationChain msgs = null;
			if (inheritance != null)
				msgs = ((InternalEObject)inheritance).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ServicePackage.DOMAIN_OBJECT__INHERITANCE, null, msgs);
			if (newInheritance != null)
				msgs = ((InternalEObject)newInheritance).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ServicePackage.DOMAIN_OBJECT__INHERITANCE, null, msgs);
			msgs = basicSetInheritance(newInheritance, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__INHERITANCE, newInheritance, newInheritance));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Repository getRepository() {
		return repository;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetRepository(Repository newRepository, NotificationChain msgs) {
		Repository oldRepository = repository;
		repository = newRepository;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__REPOSITORY, oldRepository, newRepository);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setRepository(Repository newRepository) {
		if (newRepository != repository) {
			NotificationChain msgs = null;
			if (repository != null)
				msgs = ((InternalEObject)repository).eInverseRemove(this, ServicePackage.REPOSITORY__AGGREGATE_ROOT, Repository.class, msgs);
			if (newRepository != null)
				msgs = ((InternalEObject)newRepository).eInverseAdd(this, ServicePackage.REPOSITORY__AGGREGATE_ROOT, Repository.class, msgs);
			msgs = basicSetRepository(newRepository, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__REPOSITORY, newRepository, newRepository));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<DomainObjectOperation> getOperations() {
		if (operations == null) {
			operations = new EObjectContainmentWithInverseEList<DomainObjectOperation>(DomainObjectOperation.class, this, ServicePackage.DOMAIN_OBJECT__OPERATIONS, ServicePackage.DOMAIN_OBJECT_OPERATION__DOMAINOBJECT);
		}
		return operations;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Aggregate getAggregate() {
		if (eContainerFeatureID() != ServicePackage.DOMAIN_OBJECT__AGGREGATE) return null;
		return (Aggregate)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetAggregate(Aggregate newAggregate, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newAggregate, ServicePackage.DOMAIN_OBJECT__AGGREGATE, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setAggregate(Aggregate newAggregate) {
		if (newAggregate != eInternalContainer() || (eContainerFeatureID() != ServicePackage.DOMAIN_OBJECT__AGGREGATE && newAggregate != null)) {
			if (EcoreUtil.isAncestor(this, newAggregate))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newAggregate != null)
				msgs = ((InternalEObject)newAggregate).eInverseAdd(this, ServicePackage.AGGREGATE__DOMAINOBJECTS, Aggregate.class, msgs);
			msgs = basicSetAggregate(newAggregate, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__AGGREGATE, newAggregate, newAggregate));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getPackage() {
		return package_;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setPackage(String newPackage) {
		String oldPackage = package_;
		package_ = newPackage;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__PACKAGE, oldPackage, package_));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isGapClass() {
		return gapClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setGapClass(boolean newGapClass) {
		boolean oldGapClass = gapClass;
		gapClass = newGapClass;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__GAP_CLASS, oldGapClass, gapClass));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isCache() {
		return cache;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setCache(boolean newCache) {
		boolean oldCache = cache;
		cache = newCache;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__CACHE, oldCache, cache));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isOptimisticLocking() {
		return optimisticLocking;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setOptimisticLocking(boolean newOptimisticLocking) {
		boolean oldOptimisticLocking = optimisticLocking;
		optimisticLocking = newOptimisticLocking;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__OPTIMISTIC_LOCKING, oldOptimisticLocking, optimisticLocking));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getDatabaseTable() {
		return databaseTable;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setDatabaseTable(String newDatabaseTable) {
		String oldDatabaseTable = databaseTable;
		databaseTable = newDatabaseTable;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__DATABASE_TABLE, oldDatabaseTable, databaseTable));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getValidate() {
		return validate;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setValidate(String newValidate) {
		String oldValidate = validate;
		validate = newValidate;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__VALIDATE, oldValidate, validate));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String getDiscriminatorColumnValue() {
		return discriminatorColumnValue;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setDiscriminatorColumnValue(String newDiscriminatorColumnValue) {
		String oldDiscriminatorColumnValue = discriminatorColumnValue;
		discriminatorColumnValue = newDiscriminatorColumnValue;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__DISCRIMINATOR_COLUMN_VALUE, oldDiscriminatorColumnValue, discriminatorColumnValue));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isScaffold() {
		return scaffold;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setScaffold(boolean newScaffold) {
		boolean oldScaffold = scaffold;
		scaffold = newScaffold;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__SCAFFOLD, oldScaffold, scaffold));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isGeneratedByJHipster() {
		return generatedByJHipster;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setGeneratedByJHipster(boolean newGeneratedByJHipster) {
		boolean oldGeneratedByJHipster = generatedByJHipster;
		generatedByJHipster = newGeneratedByJHipster;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__GENERATED_BY_JHIPSTER, oldGeneratedByJHipster, generatedByJHipster));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isGeneratedBySculptor() {
		return generatedBySculptor;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setGeneratedBySculptor(boolean newGeneratedBySculptor) {
		boolean oldGeneratedBySculptor = generatedBySculptor;
		generatedBySculptor = newGeneratedBySculptor;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ServicePackage.DOMAIN_OBJECT__GENERATED_BY_SCULPTOR, oldGeneratedBySculptor, generatedBySculptor));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ServicePackage.DOMAIN_OBJECT__RELATIONS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getRelations()).basicAdd(otherEnd, msgs);
			case ServicePackage.DOMAIN_OBJECT__REPOSITORY:
				if (repository != null)
					msgs = ((InternalEObject)repository).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ServicePackage.DOMAIN_OBJECT__REPOSITORY, null, msgs);
				return basicSetRepository((Repository)otherEnd, msgs);
			case ServicePackage.DOMAIN_OBJECT__OPERATIONS:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getOperations()).basicAdd(otherEnd, msgs);
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetAggregate((Aggregate)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ServicePackage.DOMAIN_OBJECT__PROPERTIES:
				return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
			case ServicePackage.DOMAIN_OBJECT__RELATIONS:
				return ((InternalEList<?>)getRelations()).basicRemove(otherEnd, msgs);
			case ServicePackage.DOMAIN_OBJECT__INHERITANCE:
				return basicSetInheritance(null, msgs);
			case ServicePackage.DOMAIN_OBJECT__REPOSITORY:
				return basicSetRepository(null, msgs);
			case ServicePackage.DOMAIN_OBJECT__OPERATIONS:
				return ((InternalEList<?>)getOperations()).basicRemove(otherEnd, msgs);
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				return basicSetAggregate(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				return eInternalContainer().eInverseRemove(this, ServicePackage.AGGREGATE__DOMAINOBJECTS, Aggregate.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ServicePackage.DOMAIN_OBJECT__PROPERTIES:
				return getProperties();
			case ServicePackage.DOMAIN_OBJECT__NAME:
				return getName();
			case ServicePackage.DOMAIN_OBJECT__ABSTRACT:
				return isAbstract();
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE_ROOT:
				return isAggregateRoot();
			case ServicePackage.DOMAIN_OBJECT__RELATIONS:
				return getRelations();
			case ServicePackage.DOMAIN_OBJECT__INHERITANCE:
				return getInheritance();
			case ServicePackage.DOMAIN_OBJECT__REPOSITORY:
				return getRepository();
			case ServicePackage.DOMAIN_OBJECT__OPERATIONS:
				return getOperations();
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				return getAggregate();
			case ServicePackage.DOMAIN_OBJECT__PACKAGE:
				return getPackage();
			case ServicePackage.DOMAIN_OBJECT__GAP_CLASS:
				return isGapClass();
			case ServicePackage.DOMAIN_OBJECT__CACHE:
				return isCache();
			case ServicePackage.DOMAIN_OBJECT__OPTIMISTIC_LOCKING:
				return isOptimisticLocking();
			case ServicePackage.DOMAIN_OBJECT__DATABASE_TABLE:
				return getDatabaseTable();
			case ServicePackage.DOMAIN_OBJECT__VALIDATE:
				return getValidate();
			case ServicePackage.DOMAIN_OBJECT__DISCRIMINATOR_COLUMN_VALUE:
				return getDiscriminatorColumnValue();
			case ServicePackage.DOMAIN_OBJECT__SCAFFOLD:
				return isScaffold();
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_JHIPSTER:
				return isGeneratedByJHipster();
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_SCULPTOR:
				return isGeneratedBySculptor();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ServicePackage.DOMAIN_OBJECT__PROPERTIES:
				getProperties().clear();
				getProperties().addAll((Collection<? extends Property>)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__NAME:
				setName((String)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__ABSTRACT:
				setAbstract((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE_ROOT:
				setAggregateRoot((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__RELATIONS:
				getRelations().clear();
				getRelations().addAll((Collection<? extends Relation>)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__INHERITANCE:
				setInheritance((Inheritance)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__REPOSITORY:
				setRepository((Repository)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__OPERATIONS:
				getOperations().clear();
				getOperations().addAll((Collection<? extends DomainObjectOperation>)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				setAggregate((Aggregate)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__PACKAGE:
				setPackage((String)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__GAP_CLASS:
				setGapClass((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__CACHE:
				setCache((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__OPTIMISTIC_LOCKING:
				setOptimisticLocking((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__DATABASE_TABLE:
				setDatabaseTable((String)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__VALIDATE:
				setValidate((String)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__DISCRIMINATOR_COLUMN_VALUE:
				setDiscriminatorColumnValue((String)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__SCAFFOLD:
				setScaffold((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_JHIPSTER:
				setGeneratedByJHipster((Boolean)newValue);
				return;
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_SCULPTOR:
				setGeneratedBySculptor((Boolean)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ServicePackage.DOMAIN_OBJECT__PROPERTIES:
				getProperties().clear();
				return;
			case ServicePackage.DOMAIN_OBJECT__NAME:
				setName(NAME_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__ABSTRACT:
				setAbstract(ABSTRACT_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE_ROOT:
				setAggregateRoot(AGGREGATE_ROOT_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__RELATIONS:
				getRelations().clear();
				return;
			case ServicePackage.DOMAIN_OBJECT__INHERITANCE:
				setInheritance((Inheritance)null);
				return;
			case ServicePackage.DOMAIN_OBJECT__REPOSITORY:
				setRepository((Repository)null);
				return;
			case ServicePackage.DOMAIN_OBJECT__OPERATIONS:
				getOperations().clear();
				return;
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				setAggregate((Aggregate)null);
				return;
			case ServicePackage.DOMAIN_OBJECT__PACKAGE:
				setPackage(PACKAGE_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__GAP_CLASS:
				setGapClass(GAP_CLASS_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__CACHE:
				setCache(CACHE_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__OPTIMISTIC_LOCKING:
				setOptimisticLocking(OPTIMISTIC_LOCKING_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__DATABASE_TABLE:
				setDatabaseTable(DATABASE_TABLE_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__VALIDATE:
				setValidate(VALIDATE_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__DISCRIMINATOR_COLUMN_VALUE:
				setDiscriminatorColumnValue(DISCRIMINATOR_COLUMN_VALUE_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__SCAFFOLD:
				setScaffold(SCAFFOLD_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_JHIPSTER:
				setGeneratedByJHipster(GENERATED_BY_JHIPSTER_EDEFAULT);
				return;
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_SCULPTOR:
				setGeneratedBySculptor(GENERATED_BY_SCULPTOR_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ServicePackage.DOMAIN_OBJECT__PROPERTIES:
				return properties != null && !properties.isEmpty();
			case ServicePackage.DOMAIN_OBJECT__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case ServicePackage.DOMAIN_OBJECT__ABSTRACT:
				return abstract_ != ABSTRACT_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE_ROOT:
				return aggregateRoot != AGGREGATE_ROOT_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__RELATIONS:
				return relations != null && !relations.isEmpty();
			case ServicePackage.DOMAIN_OBJECT__INHERITANCE:
				return inheritance != null;
			case ServicePackage.DOMAIN_OBJECT__REPOSITORY:
				return repository != null;
			case ServicePackage.DOMAIN_OBJECT__OPERATIONS:
				return operations != null && !operations.isEmpty();
			case ServicePackage.DOMAIN_OBJECT__AGGREGATE:
				return getAggregate() != null;
			case ServicePackage.DOMAIN_OBJECT__PACKAGE:
				return PACKAGE_EDEFAULT == null ? package_ != null : !PACKAGE_EDEFAULT.equals(package_);
			case ServicePackage.DOMAIN_OBJECT__GAP_CLASS:
				return gapClass != GAP_CLASS_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__CACHE:
				return cache != CACHE_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__OPTIMISTIC_LOCKING:
				return optimisticLocking != OPTIMISTIC_LOCKING_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__DATABASE_TABLE:
				return DATABASE_TABLE_EDEFAULT == null ? databaseTable != null : !DATABASE_TABLE_EDEFAULT.equals(databaseTable);
			case ServicePackage.DOMAIN_OBJECT__VALIDATE:
				return VALIDATE_EDEFAULT == null ? validate != null : !VALIDATE_EDEFAULT.equals(validate);
			case ServicePackage.DOMAIN_OBJECT__DISCRIMINATOR_COLUMN_VALUE:
				return DISCRIMINATOR_COLUMN_VALUE_EDEFAULT == null ? discriminatorColumnValue != null : !DISCRIMINATOR_COLUMN_VALUE_EDEFAULT.equals(discriminatorColumnValue);
			case ServicePackage.DOMAIN_OBJECT__SCAFFOLD:
				return scaffold != SCAFFOLD_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_JHIPSTER:
				return generatedByJHipster != GENERATED_BY_JHIPSTER_EDEFAULT;
			case ServicePackage.DOMAIN_OBJECT__GENERATED_BY_SCULPTOR:
				return generatedBySculptor != GENERATED_BY_SCULPTOR_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", abstract: ");
		result.append(abstract_);
		result.append(", aggregateRoot: ");
		result.append(aggregateRoot);
		result.append(", package: ");
		result.append(package_);
		result.append(", gapClass: ");
		result.append(gapClass);
		result.append(", cache: ");
		result.append(cache);
		result.append(", optimisticLocking: ");
		result.append(optimisticLocking);
		result.append(", databaseTable: ");
		result.append(databaseTable);
		result.append(", validate: ");
		result.append(validate);
		result.append(", discriminatorColumnValue: ");
		result.append(discriminatorColumnValue);
		result.append(", scaffold: ");
		result.append(scaffold);
		result.append(", generatedByJHipster: ");
		result.append(generatedByJHipster);
		result.append(", generatedBySculptor: ");
		result.append(generatedBySculptor);
		result.append(')');
		return result.toString();
	}

} //DomainObjectImpl
