/**
 */
package com.github.icelyframework.dynamicview.provider;

import com.github.icelyframework.dynamicview.util.DynamicviewAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DynamicviewItemProviderAdapterFactory extends DynamicviewAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DynamicviewItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Create} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CreateItemProvider createItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Create}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCreateAdapter() {
		if (createItemProvider == null) {
			createItemProvider = new CreateItemProvider(this);
		}

		return createItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Read} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReadItemProvider readItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Read}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReadAdapter() {
		if (readItemProvider == null) {
			readItemProvider = new ReadItemProvider(this);
		}

		return readItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Other} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OtherItemProvider otherItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Other}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOtherAdapter() {
		if (otherItemProvider == null) {
			otherItemProvider = new OtherItemProvider(this);
		}

		return otherItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Delete} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeleteItemProvider deleteItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Delete}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeleteAdapter() {
		if (deleteItemProvider == null) {
			deleteItemProvider = new DeleteItemProvider(this);
		}

		return deleteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.SingletonResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SingletonResourceItemProvider singletonResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.SingletonResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSingletonResourceAdapter() {
		if (singletonResourceItemProvider == null) {
			singletonResourceItemProvider = new SingletonResourceItemProvider(this);
		}

		return singletonResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveTypeAdapter() {
		if (primitiveTypeItemProvider == null) {
			primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
		}

		return primitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Publish} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PublishItemProvider publishItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Publish}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPublishAdapter() {
		if (publishItemProvider == null) {
			publishItemProvider = new PublishItemProvider(this);
		}

		return publishItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.CommandEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandEventItemProvider commandEventItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.CommandEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandEventAdapter() {
		if (commandEventItemProvider == null) {
			commandEventItemProvider = new CommandEventItemProvider(this);
		}

		return commandEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.DomainEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainEventItemProvider domainEventItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.DomainEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainEventAdapter() {
		if (domainEventItemProvider == null) {
			domainEventItemProvider = new DomainEventItemProvider(this);
		}

		return domainEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.DomainObjectOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainObjectOperationItemProvider domainObjectOperationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.DomainObjectOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainObjectOperationAdapter() {
		if (domainObjectOperationItemProvider == null) {
			domainObjectOperationItemProvider = new DomainObjectOperationItemProvider(this);
		}

		return domainObjectOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Policy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PolicyItemProvider policyItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Policy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPolicyAdapter() {
		if (policyItemProvider == null) {
			policyItemProvider = new PolicyItemProvider(this);
		}

		return policyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.CommandOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandOperationItemProvider commandOperationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.CommandOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandOperationAdapter() {
		if (commandOperationItemProvider == null) {
			commandOperationItemProvider = new CommandOperationItemProvider(this);
		}

		return commandOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.QueryOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryOperationItemProvider queryOperationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.QueryOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryOperationAdapter() {
		if (queryOperationItemProvider == null) {
			queryOperationItemProvider = new QueryOperationItemProvider(this);
		}

		return queryOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.ProcessOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessOperationItemProvider processOperationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.ProcessOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessOperationAdapter() {
		if (processOperationItemProvider == null) {
			processOperationItemProvider = new ProcessOperationItemProvider(this);
		}

		return processOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Process} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProcessItemProvider processItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Process}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProcessAdapter() {
		if (processItemProvider == null) {
			processItemProvider = new ProcessItemProvider(this);
		}

		return processItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.CollectionResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollectionResourceItemProvider collectionResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.CollectionResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollectionResourceAdapter() {
		if (collectionResourceItemProvider == null) {
			collectionResourceItemProvider = new CollectionResourceItemProvider(this);
		}

		return collectionResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Aggregate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AggregateItemProvider aggregateItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Aggregate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAggregateAdapter() {
		if (aggregateItemProvider == null) {
			aggregateItemProvider = new AggregateItemProvider(this);
		}

		return aggregateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.ValueObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueObjectItemProvider valueObjectItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.ValueObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueObjectAdapter() {
		if (valueObjectItemProvider == null) {
			valueObjectItemProvider = new ValueObjectItemProvider(this);
		}

		return valueObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.DTO} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTOItemProvider dtoItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.DTO}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTOAdapter() {
		if (dtoItemProvider == null) {
			dtoItemProvider = new DTOItemProvider(this);
		}

		return dtoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Enumeration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumerationItemProvider enumerationItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Enumeration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumerationAdapter() {
		if (enumerationItemProvider == null) {
			enumerationItemProvider = new EnumerationItemProvider(this);
		}

		return enumerationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.BasicType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicTypeItemProvider basicTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.BasicType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicTypeAdapter() {
		if (basicTypeItemProvider == null) {
			basicTypeItemProvider = new BasicTypeItemProvider(this);
		}

		return basicTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.ComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeItemProvider complexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.ComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexTypeAdapter() {
		if (complexTypeItemProvider == null) {
			complexTypeItemProvider = new ComplexTypeItemProvider(this);
		}

		return complexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Role} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoleItemProvider roleItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Role}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoleAdapter() {
		if (roleItemProvider == null) {
			roleItemProvider = new RoleItemProvider(this);
		}

		return roleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.HasAuthority} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasAuthorityItemProvider hasAuthorityItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.HasAuthority}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasAuthorityAdapter() {
		if (hasAuthorityItemProvider == null) {
			hasAuthorityItemProvider = new HasAuthorityItemProvider(this);
		}

		return hasAuthorityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Authenticated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AuthenticatedItemProvider authenticatedItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Authenticated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAuthenticatedAdapter() {
		if (authenticatedItemProvider == null) {
			authenticatedItemProvider = new AuthenticatedItemProvider(this);
		}

		return authenticatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.PermitAll} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PermitAllItemProvider permitAllItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.PermitAll}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPermitAllAdapter() {
		if (permitAllItemProvider == null) {
			permitAllItemProvider = new PermitAllItemProvider(this);
		}

		return permitAllItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.HasAnyAuthorities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HasAnyAuthoritiesItemProvider hasAnyAuthoritiesItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.HasAnyAuthorities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHasAnyAuthoritiesAdapter() {
		if (hasAnyAuthoritiesItemProvider == null) {
			hasAnyAuthoritiesItemProvider = new HasAnyAuthoritiesItemProvider(this);
		}

		return hasAnyAuthoritiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.github.icelyframework.dynamicview.Access} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AccessItemProvider accessItemProvider;

	/**
	 * This creates an adapter for a {@link com.github.icelyframework.dynamicview.Access}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAccessAdapter() {
		if (accessItemProvider == null) {
			accessItemProvider = new AccessItemProvider(this);
		}

		return accessItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (applicationItemProvider != null) applicationItemProvider.dispose();
		if (createItemProvider != null) createItemProvider.dispose();
		if (readItemProvider != null) readItemProvider.dispose();
		if (otherItemProvider != null) otherItemProvider.dispose();
		if (deleteItemProvider != null) deleteItemProvider.dispose();
		if (operationItemProvider != null) operationItemProvider.dispose();
		if (singletonResourceItemProvider != null) singletonResourceItemProvider.dispose();
		if (primitiveTypeItemProvider != null) primitiveTypeItemProvider.dispose();
		if (publishItemProvider != null) publishItemProvider.dispose();
		if (commandEventItemProvider != null) commandEventItemProvider.dispose();
		if (domainEventItemProvider != null) domainEventItemProvider.dispose();
		if (domainObjectOperationItemProvider != null) domainObjectOperationItemProvider.dispose();
		if (policyItemProvider != null) policyItemProvider.dispose();
		if (commandOperationItemProvider != null) commandOperationItemProvider.dispose();
		if (queryOperationItemProvider != null) queryOperationItemProvider.dispose();
		if (processOperationItemProvider != null) processOperationItemProvider.dispose();
		if (processItemProvider != null) processItemProvider.dispose();
		if (projectItemProvider != null) projectItemProvider.dispose();
		if (collectionResourceItemProvider != null) collectionResourceItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (aggregateItemProvider != null) aggregateItemProvider.dispose();
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (valueObjectItemProvider != null) valueObjectItemProvider.dispose();
		if (dtoItemProvider != null) dtoItemProvider.dispose();
		if (enumerationItemProvider != null) enumerationItemProvider.dispose();
		if (basicTypeItemProvider != null) basicTypeItemProvider.dispose();
		if (complexTypeItemProvider != null) complexTypeItemProvider.dispose();
		if (roleItemProvider != null) roleItemProvider.dispose();
		if (hasAuthorityItemProvider != null) hasAuthorityItemProvider.dispose();
		if (authenticatedItemProvider != null) authenticatedItemProvider.dispose();
		if (permitAllItemProvider != null) permitAllItemProvider.dispose();
		if (hasAnyAuthoritiesItemProvider != null) hasAnyAuthoritiesItemProvider.dispose();
		if (accessItemProvider != null) accessItemProvider.dispose();
	}

}
